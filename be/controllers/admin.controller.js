const bcrypt = require('bcryptjs')
const User = require('../models/User')
const Customer = require('../models/Customer')
const Admin = require('../models/Admin')
const Chef = require('../models/Chef')
const Servant = require('../models/Servant')

// Admin t·∫°o t√†i kho·∫£n cho staff (servant, chef) v√† admin kh√°c
const createStaffAccount = async (req, res) => {
    try {
        const { fullname, username, email, phone, password, dateOfBirth, gender, role } = req.body

        // Validate required fields
        if (!username || !email || !password || !role) {
            return res.status(400).json({
                message: 'Username, email, password v√† role l√† b·∫Øt bu·ªôc'
            })
        }

        // Validate role - ch·ªâ cho ph√©p t·∫°o staff roles
        const allowedRoles = ['servant', 'chef', 'admin']
        if (!allowedRoles.includes(role)) {
            return res.status(400).json({
                message: 'Ch·ªâ c√≥ th·ªÉ t·∫°o t√†i kho·∫£n servant, chef ho·∫∑c admin'
            })
        }

        // OPTION 1: H·∫°n ch·∫ø t·∫°o admin - ch·ªâ super admin m·ªõi t·∫°o ƒë∆∞·ª£c admin kh√°c
        // Uncomment d√≤ng d∆∞·ªõi n·∫øu mu·ªën h·∫°n ch·∫ø
        if (role === 'admin' && req.jwtDecode?.email !== 'lmhthoai1@gmail.com') {
            return res.status(403).json({
                message: 'Ch·ªâ Super Admin m·ªõi c√≥ th·ªÉ t·∫°o t√†i kho·∫£n Admin kh√°c'
            })
        }

        // OPTION 2: Log vi·ªác t·∫°o admin ƒë·ªÉ audit
        if (role === 'admin') {
            console.log(`‚ö†Ô∏è  ADMIN CREATION: ${req.jwtDecode?.email} ƒëang t·∫°o t√†i kho·∫£n admin cho ${email}`)
        }

        // Validate email format
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        if (!emailRegex.test(email)) {
            return res.status(400).json({
                message: 'Email kh√¥ng h·ª£p l·ªá'
            })
        }

        // Validate password strength
        if (password.length < 6) {
            return res.status(400).json({
                message: 'Password ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
            })
        }

        // Check if user already exists
        const existingUser = await User.findOne({
            $or: [
                { email: email.toLowerCase() },
                { username: username.toLowerCase() }
            ]
        })

        if (existingUser) {
            return res.status(409).json({
                message: 'Email ho·∫∑c username ƒë√£ t·ªìn t·∫°i'
            })
        }

        // Hash password
        const saltRounds = 12
        const hashedPassword = await bcrypt.hash(password, saltRounds)

        // Create user
        const newUser = new User({
            fullname,
            username: username.toLowerCase(),
            email: email.toLowerCase(),
            phone,
            password: hashedPassword,
            dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : undefined,
            gender,
            role,
            verified: true, // Staff accounts are pre-verified
            active: true
        })

        const savedUser = await newUser.save()

        // Create role-specific record
        let roleSpecificData = null
        switch (role) {
            case 'admin':
                roleSpecificData = await new Admin({
                    userId: savedUser._id
                }).save()
                break
            case 'chef':
                roleSpecificData = await new Chef({
                    userId: savedUser._id,
                    specialties: [],
                    experiencedYear: 0,
                    status: ['available'] // Gi·ªØ nguy√™n theo y√™u c·∫ßu user
                }).save()
                break
            case 'servant':
                roleSpecificData = await new Servant({
                    userId: savedUser._id,
                    assignedTables: [],
                    status: ['available'] // Gi·ªØ nguy√™n theo y√™u c·∫ßu user
                }).save()
                break
        }

        // Remove password from response
        const { password: _, ...userWithoutPassword } = savedUser.toObject()

        res.status(201).json({
            message: `T·∫°o t√†i kho·∫£n ${role} th√†nh c√¥ng`,
            user: userWithoutPassword,
            roleData: roleSpecificData,
            createdBy: req.jwtDecode?.email
        })

    } catch (err) {
        console.error('Create staff account error:', err)
        return res.status(500).json({
            message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t·∫°o t√†i kho·∫£n',
            error: err.message
        })
    }
}

// L·∫•y danh s√°ch t·∫•t c·∫£ staff
const getAllStaff = async (req, res) => {
    try {
        const { role, page = 1, limit = 10, search } = req.query

        // Build query
        let query = { role: { $in: ['admin', 'chef', 'servant', 'customer'] } }
        
        if (role && ['admin', 'chef', 'servant', 'customer'].includes(role)) {
            query.role = role
        }

        if (search) {
            query.$or = [
                { fullname: { $regex: search, $options: 'i' } },
                { email: { $regex: search, $options: 'i' } },
                { username: { $regex: search, $options: 'i' } }
            ]
        }

        const skip = (page - 1) * limit
        const total = await User.countDocuments(query)

        const staff = await User.find(query)
            .select('-password -verificationToken -verificationTokenExpired')
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(parseInt(limit))

        res.status(200).json({
            message: 'L·∫•y danh s√°ch staff th√†nh c√¥ng',
            data: staff,
            pagination: {
                currentPage: parseInt(page),
                totalPages: Math.ceil(total / limit),
                totalItems: total,
                itemsPerPage: parseInt(limit)
            }
        })

    } catch (err) {
        console.error('Get all staff error:', err)
        return res.status(500).json({
            message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch staff',
            error: err.message
        })
    }
}



// X√≥a/v√¥ hi·ªáu h√≥a t√†i kho·∫£n staff
const deactivateStaffAccount = async (req, res) => {
    try {
        const { userId } = req.params

        const user = await User.findById(userId)
        if (!user) {
            return res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y user'
            })
        }

        // Kh√¥ng cho ph√©p t·ª± x√≥a ch√≠nh m√¨nh
        if (user._id.toString() === req.jwtDecode?.id) {
            return res.status(403).json({
                message: 'Kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a t√†i kho·∫£n c·ªßa ch√≠nh m√¨nh'
            })
        }

       

        user.active = false
        await user.save()

        // Log action
        console.log(`üö´ ACCOUNT DEACTIVATED: ${req.jwtDecode?.email} ƒë√£ v√¥ hi·ªáu h√≥a t√†i kho·∫£n ${user.email}`)

        res.status(200).json({
            message: 'V√¥ hi·ªáu h√≥a t√†i kho·∫£n th√†nh c√¥ng',
            deactivatedUser: user.email,
            deactivatedBy: req.jwtDecode?.email
        })

    } catch (err) {
        console.error('Deactivate staff account error:', err)
        return res.status(500).json({
            message: 'ƒê√£ x·∫£y ra l·ªói khi v√¥ hi·ªáu h√≥a t√†i kho·∫£n',
            error: err.message
        })
    }
}

// K√≠ch ho·∫°t t√†i kho·∫£n staff
const activateStaffAccount = async (req, res) => {
    try {
        const { userId } = req.params

        const user = await User.findById(userId)
        if (!user) {
            return res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y user'
            })
        }

        user.active = true
        await user.save()

        // Log action
        console.log(`‚úÖ ACCOUNT ACTIVATED: ${req.jwtDecode?.email} ƒë√£ k√≠ch ho·∫°t t√†i kho·∫£n ${user.email}`)

        res.status(200).json({
            message: 'K√≠ch ho·∫°t t√†i kho·∫£n th√†nh c√¥ng',
            activatedUser: user.email,
            activatedBy: req.jwtDecode?.email
        })

    } catch (err) {
        console.error('Activate staff account error:', err)
        return res.status(500).json({
            message: 'ƒê√£ x·∫£y ra l·ªói khi k√≠ch ho·∫°t t√†i kho·∫£n',
            error: err.message
        })
    }
}

// L·∫•y th√¥ng tin staff theo ID
const getStaffById = async (req, res) => {
    try {
        const { userId } = req.params

        const user = await User.findById(userId)
            .select('-password -verificationToken -verificationTokenExpired')

        if (!user) {
            return res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y user'
            })
        }

        res.status(200).json({
            message: 'L·∫•y th√¥ng tin staff th√†nh c√¥ng',
            data: user
        })

    } catch (err) {
        console.error('Get staff by ID error:', err)
        return res.status(500).json({
            message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin staff',
            error: err.message
        })
    }
}

// C·∫≠p nh·∫≠t th√¥ng tin staff
const updateStaffAccount = async (req, res) => {
    try {
        const { userId } = req.params
        const { fullname, username, email, phone, dateOfBirth, gender, role, active } = req.body

        const user = await User.findById(userId)
        if (!user) {
            return res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y user'
            })
        }

        // Kh√¥ng cho ph√©p t·ª± c·∫≠p nh·∫≠t role c·ªßa ch√≠nh m√¨nh
        if (user._id.toString() === req.jwtDecode?.id && role && role !== user.role) {
            return res.status(403).json({
                message: 'Kh√¥ng th·ªÉ thay ƒë·ªïi role c·ªßa ch√≠nh m√¨nh'
            })
        }

        // Validate email format n·∫øu c√≥ thay ƒë·ªïi
        if (email && email !== user.email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
            if (!emailRegex.test(email)) {
                return res.status(400).json({
                    message: 'Email kh√¥ng h·ª£p l·ªá'
                })
            }

            // Check if email already exists
            const existingUser = await User.findOne({
                email: email.toLowerCase(),
                _id: { $ne: userId }
            })

            if (existingUser) {
                return res.status(409).json({
                    message: 'Email ƒë√£ t·ªìn t·∫°i'
                })
            }
        }

        // Check if username already exists
        if (username && username !== user.username) {
            const existingUser = await User.findOne({
                username: username.toLowerCase(),
                _id: { $ne: userId }
            })

            if (existingUser) {
                return res.status(409).json({
                    message: 'Username ƒë√£ t·ªìn t·∫°i'
                })
            }
        }

        // Update fields
        if (fullname !== undefined) user.fullname = fullname
        if (username !== undefined) user.username = username.toLowerCase()
        if (email !== undefined) user.email = email.toLowerCase()
        if (phone !== undefined) user.phone = phone
        if (dateOfBirth !== undefined) user.dateOfBirth = dateOfBirth ? new Date(dateOfBirth) : null
        if (gender !== undefined) user.gender = gender
        if (role !== undefined) user.role = role
        if (active !== undefined) user.active = active

        const updatedUser = await user.save()

        // Remove password from response
        const { password: _, ...userWithoutPassword } = updatedUser.toObject()

        // Log action
        console.log(`üìù STAFF UPDATED: ${req.jwtDecode?.email} ƒë√£ c·∫≠p nh·∫≠t th√¥ng tin ${user.email}`)

        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t th√¥ng tin staff th√†nh c√¥ng',
            user: userWithoutPassword,
            updatedBy: req.jwtDecode?.email
        })

    } catch (err) {
        console.error('Update staff account error:', err)
        return res.status(500).json({
            message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin staff',
            error: err.message
        })
    }
}

// Reset password cho staff
const resetStaffPassword = async (req, res) => {
    try {
        const { userId } = req.params
        const { newPassword } = req.body

        if (!newPassword || newPassword.length < 6) {
            return res.status(400).json({
                message: 'Password m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
            })
        }

        const user = await User.findById(userId)
        if (!user) {
            return res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y user'
            })
        }

        // Ch·ªâ cho ph√©p reset password cho staff
        if (!['admin', 'chef', 'servant'].includes(user.role)) {
            return res.status(403).json({
                message: 'Ch·ªâ c√≥ th·ªÉ reset password cho t√†i kho·∫£n staff'
            })
        }

        // Hash new password
        const saltRounds = 12
        const hashedPassword = await bcrypt.hash(newPassword, saltRounds)
        
        user.password = hashedPassword
        await user.save()

        // Log action
        console.log(`üîë PASSWORD RESET: ${req.jwtDecode?.email} ƒë√£ reset password cho ${user.email}`)

        res.status(200).json({
            message: 'Reset password th√†nh c√¥ng',
            targetUser: user.email,
            resetBy: req.jwtDecode?.email
        })

    } catch (err) {
        console.error('Reset staff password error:', err)
        return res.status(500).json({
            message: 'ƒê√£ x·∫£y ra l·ªói khi reset password',
            error: err.message
        })
    }
}

module.exports = {
    createStaffAccount,
    getAllStaff,
    updateStaffAccount,
    deactivateStaffAccount,
    activateStaffAccount,
    getStaffById,
    resetStaffPassword
} 