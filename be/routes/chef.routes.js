const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');

const TableOrder = require('../models/TableOrder');




// GET /api/table-orders
router.get('/', async (req, res) => {
  const orders = await TableOrder.find()
    .populate('tableId') // l·∫•y th√¥ng tin b√†n
    .populate('foods.foodId') // n·∫øu mu·ªën l·∫•y t√™n m√≥n
    .sort({ createdAt: -1 });

  res.json(orders);
});


router.post('/:id/complete', async (req, res) => {
  try {
    const id = req.params.id;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'ID kh√¥ng h·ª£p l·ªá' });
    }

    console.log('üîß G·ªçi ho√†n th√†nh ƒë∆°n v·ªõi ID:', id);

    const order = await TableOrder.findById(id);
    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    if (order.status === 'completed') {
      return res.status(400).json({ message: 'ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh' });
    }

    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i m√† kh√¥ng validate to√†n b·ªô schema
    const updatedOrder = await TableOrder.findByIdAndUpdate(
      id,
      {
        paymentStatus: 'completed',
        completedAt: new Date()
      },
      {
        new: true,
        runValidators: false // ‚õî Kh√¥ng validate userId n·ªØa
      }
    );

    console.log('‚úÖ ƒê√£ ho√†n th√†nh ƒë∆°n:', updatedOrder._id);
    res.json({ message: 'ƒê√£ ho√†n th√†nh ƒë∆°n', order: updatedOrder });
  } catch (err) {
    console.error('‚ùå L·ªói backend:', err);
    res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
});

// POST /api/table-orders/:id/payment-status
router.post('/:id/payment-status', async (req, res) => {
  try {
    const id = req.params.id;
    const { paymentStatus } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'ID kh√¥ng h·ª£p l·ªá' });
    }

    if (!paymentStatus) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin paymentStatus' });
    }

    const updatedOrder = await TableOrder.findByIdAndUpdate(
      id,
      { paymentStatus },
      { new: true, runValidators: false }
    );

    if (!updatedOrder) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    console.log('üí≥ ƒê√£ c·∫≠p nh·∫≠t paymentStatus:', updatedOrder._id, paymentStatus);
    res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng', order: updatedOrder });
  } catch (err) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t paymentStatus:', err);
    res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
});

router.post('/:id/update-payment-status', async (req, res) => {
  try {
    const id = req.params.id;
    const { paymentStatus } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'ID kh√¥ng h·ª£p l·ªá' });
    }

    if (!paymentStatus) {
      return res.status(400).json({ message: 'Thi·∫øu tr·∫°ng th√°i thanh to√°n' });
    }

    const updatedOrder = await TableOrder.findByIdAndUpdate(
      id,
      { paymentStatus,
        paidAt: new Date()
       },

      { new: true, runValidators: false }
    );

    if (!updatedOrder) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng', order: updatedOrder });
  } catch (err) {
    console.error('‚ùå L·ªói server:', err);
    res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
});




module.exports = router;
